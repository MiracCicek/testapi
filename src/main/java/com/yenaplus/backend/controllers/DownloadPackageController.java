/*
 * EnoviaRestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.yenaplus.backend.controllers;

import com.yenaplus.backend.ApiHelper;
import com.yenaplus.backend.Server;
import com.yenaplus.backend.exceptions.ApiException;
import com.yenaplus.backend.http.request.HttpMethod;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DownloadPackageController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DownloadPackageController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  filter  Required parameter: Example:
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void downloadpackageStructured(
            final String filter,
            final String u,
            final String docType,
            final String pid) throws ApiException, IOException {
        prepareDownloadpackageStructuredRequest(filter, u, docType, pid).execute();
    }

    /**
     * @param  filter  Required parameter: Example:
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> downloadpackageStructuredAsync(
            final String filter,
            final String u,
            final String docType,
            final String pid) {
        try { 
            return prepareDownloadpackageStructuredRequest(filter, u, docType, pid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for downloadpackageStructured.
     */
    private ApiCall<Void, ApiException> prepareDownloadpackageStructuredRequest(
            final String filter,
            final String u,
            final String docType,
            final String pid) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.BACKEND.value())
                        .path("/bom/downloadpackage/{pid}/structured")
                        .queryParam(param -> param.key("filter")
                                .value(filter))
                        .queryParam(param -> param.key("u")
                                .value(u))
                        .queryParam(param -> param.key("doc_type")
                                .value(docType))
                        .templateParam(param -> param.key("pid").value(pid)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  filter  Required parameter: Example:
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void downloadpackageFlat(
            final String filter,
            final String u,
            final String docType,
            final String pid) throws ApiException, IOException {
        prepareDownloadpackageFlatRequest(filter, u, docType, pid).execute();
    }

    /**
     * @param  filter  Required parameter: Example:
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> downloadpackageFlatAsync(
            final String filter,
            final String u,
            final String docType,
            final String pid) {
        try { 
            return prepareDownloadpackageFlatRequest(filter, u, docType, pid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for downloadpackageFlat.
     */
    private ApiCall<Void, ApiException> prepareDownloadpackageFlatRequest(
            final String filter,
            final String u,
            final String docType,
            final String pid) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.BACKEND.value())
                        .path("/bom/downloadpackage/{pid}/flat")
                        .queryParam(param -> param.key("filter")
                                .value(filter))
                        .queryParam(param -> param.key("u")
                                .value(u))
                        .queryParam(param -> param.key("doc_type")
                                .value(docType))
                        .templateParam(param -> param.key("pid").value(pid)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  u  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void gettabledata(
            final String u) throws ApiException, IOException {
        prepareGettabledataRequest(u).execute();
    }

    /**
     * @param  u  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> gettabledataAsync(
            final String u) {
        try { 
            return prepareGettabledataRequest(u).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for gettabledata.
     */
    private ApiCall<Void, ApiException> prepareGettabledataRequest(
            final String u) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.BACKEND.value())
                        .path("/bom/gettabledata/56B86B0000001BF0640AE0E6001022A5/plain")
                        .queryParam(param -> param.key("u")
                                .value(u))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void csvreport(
            final String u,
            final String docType,
            final String pid) throws ApiException, IOException {
        prepareCsvreportRequest(u, docType, pid).execute();
    }

    /**
     * @param  u  Required parameter: Example:
     * @param  docType  Required parameter: Example:
     * @param  pid  Required parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> csvreportAsync(
            final String u,
            final String docType,
            final String pid) {
        try { 
            return prepareCsvreportRequest(u, docType, pid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for csvreport.
     */
    private ApiCall<Void, ApiException> prepareCsvreportRequest(
            final String u,
            final String docType,
            final String pid) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.BACKEND.value())
                        .path("/bom/csvreport/{pid}/download")
                        .queryParam(param -> param.key("u")
                                .value(u))
                        .queryParam(param -> param.key("doc_type")
                                .value(docType))
                        .templateParam(param -> param.key("pid").value(pid)
                                .shouldEncode(true))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}